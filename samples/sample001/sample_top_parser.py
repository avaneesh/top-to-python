import re, os, sys, datetime
from top_to_python import *

# Generate Google annotation chart
# https://developers.google.com/chart/interactive/docs/gallery/annotationchart
def generate_chart():
    # [new Date(2314, 2, 16, 12, 30, 45), 90, "Cold", "Member", 20],
    row_template = '[new Date(%s), %d, %s, %s, %d],'
    i=0
    row_list=[]
    # Today's date ==>> "2015, 2, 23"

    today_str = datetime.date.today().strftime("%Y, %m, %d")
    print "Genating chart now.."
    for r_a in top_record_list_active:
        r_s = top_record_list_standby[i]
        # "11:30:20" ==>> "11, 30, 20"
        time_str = ', '.join(r_a.timestamp.rsplit(':'))
        date_str=today_str+", "+time_str
        
        row_data = row_template % (date_str, int(r_a.p_watch_list[0].cpu), 'undefined', 'undefined', int(r_a.p_watch_list[1].cpu))
        row_list.append(row_data)
        i += 1
    with open('templates/cpu_chart_template1.html') as f:
        chart_template = f.read()

    with open('chart.html', 'w') as f:
        f.write(chart_template % ('\n'.join(row_list)))

# Generate TSV Tab separated values        
# This can be fed to eg. D3, Excel etc
# Sample - templates/cpu_chart_d3.html
def generate_tsv():
    # 20111001  63.4    62.7    72.2
    row_template = '%s\t%s\t%s'
    row_header = 'date\tM9 OS\tHealth Monitor'
    i=0
    row_list=[]
    row_list.append(row_header)
    # Today's date ==>> "2015, 2, 23"

    today_str = datetime.date.today().strftime("%Y%m%d")
    print "Genating TSV now.."
    for r_a in top_record_list_active:
        # "11:30:20" ==>> "11, 30, 20"
        time_str = ''.join(r_a.timestamp.rsplit(':'))
        date_str=today_str+time_str
        
        row_data = row_template % (date_str, str(r_a.p_watch_list[0].cpu), str(r_a.p_watch_list[1].cpu))
        row_list.append(row_data)
        i += 1

    with open('top_data.tsv', 'w') as f:
        f.write('\n'.join(row_list))
 

watch_list=[]
w1=WatchFor('linux_m9os-imag', 'M9 OS')
watch_list.append(w1)
w2=WatchFor('hmonitor', 'Health Monitor')
watch_list.append(w2)

if __name__ == "__main__":

    init_data(watch_list)

    top_record_list_active=[]
    top_record_list_standby=[]

# Provide the file generated by 'top_recorder' program
    parse_file("top_record_active.out", top_record_list_active)
    parse_file("top_record_standby.out", top_record_list_standby)

    # Generate Chart
    generate_chart()
    generate_tsv()

